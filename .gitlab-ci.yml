# order of the different jobs
stages:
  - build
  - check
  - document
  - test
  - deploy

# define system environment variables
variables:
  R_REPOS: "http://cloud.R-project.org/"
  R_LIBS_CACHE : "$CI_PROJECT_DIR/.cache/install_deps/$R_VERSION" # dependencies cache
  R_ENVIRON : "$CI_PROJECT_DIR/.Renviron" # R environment cache
  R_TMP_USER: "$CI_PROJECT_DIR/tmp"  # temporary directory
  R_IMG_LIB: "/usr/local/lib/R/site-library"  # temporary directory

# Cache R directories in between jobs
.cache_dependencies: &cache_dependencies
  cache:  
     paths:
      - $R_LIBS_CACHE
      - $R_ENVIRON

.prepare_script_r: &prepare_script_r
  <<: *cache_dependencies
  image: rocker/tidyverse:$R_VERSION
  before_script:
    - mkdir -p  $R_LIBS_CACHE
    - chmod -R 777 $R_LIBS_CACHE
    - cp -R $R_LIBS_CACHE $R_IMG_LIB
    - rm -R $R_LIBS_CACHE
    - R -e 'options(repos =c(CRAN=Sys.getenv("R_REPOS")));install.packages("devtools");devtools::install_deps(dependencies = TRUE, upgrade = FALSE)'
  after_script:
    - mkdir -p  $R_LIBS_CACHE
    - chmod -R 777 $R_LIBS_CACHE
    - cp -R $R_IMG_LIB/* $R_LIBS_CACHE
    
# create an archive 
.build:binary: &build_r
  <<: *prepare_script_r
  stage: build
  script:
   - R -e 'devtools::build(binary = TRUE)'

.check:errors: &errors_r
  <<: *prepare_script_r
  stage: check
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[errors], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/errorsFail"), error = function(e) system("touch $R_TMP_USER/errorsFail"))'
    - if [ -f $R_TMP_USER/errorsFail ]; then echo "Check Errors"; exit 1 ; else echo "No Errors"; fi
    
.check:warnings: &warnings_r
  <<: *prepare_script_r
  stage: check
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[warnings], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/warningsFail"), error = function(e) system("touch $R_TMP_USER/warningsFail"))'
    - if [ -f $R_TMP_USER/warningsFail ]; then echo "Check Warnings"; exit 1 ; else echo "No Warnings"; fi

.check:notes: &notes_r
  <<: *prepare_script_r
  allow_failure: true
  stage: check
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[notes], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/notesFail"), error = function(e) system("touch $R_TMP_USER/notesFail"))'
    - if [ -f $R_TMP_USER/notesFail ]; then echo "Check Notes"; exit 1 ; else echo "No Notes"; fi

.unit:tests: &unit_r
  <<: *prepare_script_r
  when: manual
  stage: test
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'if (any(as.data.frame(devtools::test())[failed] > 0)) system("touch $R_TMP_USER/testsFail")
    - if [ -f $R_TMP_USER/testsFail ]; then echo "Check Tests"; exit 1 ; else echo "Tests passed"; fi    

.install:locally: &install_local_r
  <<: *prepare_script_r
  stage: test
  script:
    - R -e 'options(repos =c(CRAN=Sys.getenv("R_REPOS")));devtools::install(build_vignettes=TRUE,dependencies = TRUE)'

.code:coverage: &coverage_r
  <<: *prepare_script_r
  allow_failure: true
  when: manual
  stage: test
  script:
    - R -e 'covr::codecov()'

.build:vignette: &build_vignette_r
  <<: *prepare_script_r
  stage: document
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[errors], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/errorsFail"), error = function(e) system("touch $R_TMP_USER/errorsFail"))'
    - if [ -f $R_TMP_USER/errorsFail ]; then echo "Check Errors"; exit 1 ; else echo "No Errors"; fi
  
.with_r34: &with_r34
  variables: 
   R_VERSION: "3.4.4"
   R_LIBS_USER: "$R_LIBS_CACHE/3.4.4"

.with_r35: &with_r35
  variables: 
   R_VERSION: "3.5.3"
   R_LIBS_USER: "$R_LIBS_CACHE/3.5.3"

.with_r36: &with_r36
  variables: 
   R_VERSION: "3.6.3"
   R_LIBS_USER: "$R_LIBS_CACHE/3.6.3"

.with_r40: &with_r40
  variables: 
   R_VERSION: "4.0.0"
   R_LIBS_USER: "$R_LIBS_CACHE/4.0.0"


buildBinary:3.4:
  <<: *with_r34
  <<: *build_r

checkErrors:3.4:
  <<: *with_r34
  <<: *errors_r
  needs: buildBinary:3.4

checkWarnings:3.4:
  <<: *with_r34
  <<: *warnings_r
  needs: buildBinary:3.4

checkNotes:3.4:
  <<: *with_r34
  <<: *notes_r
  needs: buildBinary:3.4

test_unit:3.4:
  <<: *with_r34
  <<: *unit_r
  needs: checkErrors:3.4
 
install_local:3.4:
  <<: *with_r34
  <<: *install_local_r
  needs: checkErrors:3.4
 
code_coverage:3.4:
  <<: *with_r34
  <<: *coverage_r
  needs: checkErrors:3.4
 
build_vignette_r:3.4:
  <<: *with_r34
  <<: *build_vignette_r
  needs: checkErrors:3.4
 
 