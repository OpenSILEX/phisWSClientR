# order of the different jobs
stages:
  - build
  - check
  - test

# define system environment variables
variables:
  PACKAGE_VERSION: "2.3.1"
  R_REPOS: "http://cloud.R-project.org/"
  R_LIBS_CACHE : "$CI_PROJECT_DIR/.cache/install_deps/$R_VERSION" # dependencies cache
  R_ENVIRON : "$CI_PROJECT_DIR/.Renviron" # R environment cache
  R_TMP_USER: "$CI_PROJECT_DIR/tmp"  # temporary directory
  R_IMG_LIB: "/usr/local/lib/R/site-library"  # temporary directory
  BUILT_PACKAGE: "$CI_PROJECT_DIR/../phisWSClientR_${PACKAGE_VERSION}_R_x86_64-pc-linux-gnu.tar.gz"  # temporary directory
  BUILT_PACKAGE_DIR: "$CI_PROJECT_DIR/.built"
  BUILT_PACKAGE_PATH: "$CI_PROJECT_DIR/.built/phisWSClientR_${PACKAGE_VERSION}_R_x86_64-pc-linux-gnu.tar.gz"
  SET_R_LIB: '.libPaths(c(Sys.getenv("R_LIBS_CACHE"),.libPaths()))'

# Cache R directories in between jobs
.cache_dependencies: &cache_dependencies
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - $R_LIBS_CACHE

.prepare_script_r: &prepare_script_r
  <<: *cache_dependencies
  image: $IMAGE_TAG
  before_script:
    - if [ -d "$BUILT_PACKAGE_DIR" ]; then rm -R $BUILT_PACKAGE_DIR; fi
    
# create an archive 
.build:binary: &build_r
  <<: *prepare_script_r
  stage: build
  script:
    - R -e 'devtools::build(binary = TRUE)'
    - mkdir -p $BUILT_PACKAGE_DIR
    - cp $BUILT_PACKAGE $BUILT_PACKAGE_DIR
    - chmod -R 777 $BUILT_PACKAGE_PATH
  artifacts:
    paths:
      - $BUILT_PACKAGE_PATH
      
.check:errors: &errors_r
  <<: *prepare_script_r
  stage: check
  script:
    - R -e 'devtools::check(document = FALSE, args = "--no-tests", error_on = c("error"))'
    
.check:warnings: &warnings_r
  <<: *prepare_script_r
  stage: check
  script:
    - R -e 'devtools::check(document = FALSE, args = "--no-tests", error_on = c("warning"))'
   
.check:notes: &notes_r
  <<: *prepare_script_r
  allow_failure: true
  stage: check
  script:
    - R -e 'devtools::check(document = FALSE, args = "--no-tests", error_on = c("note"))'

.unit:tests: &unit_r
  <<: *prepare_script_r
  when: manual
  stage: test
  script:
    - R -e 'devtools::test(stop_on_failure = TRUE)'

.install:locally: &install_local_r
  <<: *prepare_script_r
  stage: test
  script:
    - R -e 'options(repos =c(CRAN=Sys.getenv("R_REPOS")));devtools::install(build_vignettes=TRUE,dependencies = TRUE)'

.code:coverage: &coverage_r
  <<: *prepare_script_r
  allow_failure: true
  when: manual
  stage: test
  script:
    - R -e 'covr::codecov()'

.with_r34: &with_r34
  variables: 
   IMAGE_TAG: "registry.forgemia.inra.fr/opensilex/data-analysis-visualisation/phiswsclientr/r-tidyverse:3.4.4"

.with_r35: &with_r35
  variables: 
   R_VERSION: "3.5.3"
   R_LIBS_USER: "$R_LIBS_CACHE/3.5.3"

.with_r36: &with_r36
  variables: 
   R_VERSION: "3.6.3"
   R_LIBS_USER: "$R_LIBS_CACHE/3.6.3"

.with_r40: &with_r40
  variables: 
   R_VERSION: "4.0.0"
   R_LIBS_USER: "$R_LIBS_CACHE/4.0.0"


buildBinary:3.4:
  <<: *with_r34
  <<: *build_r

checkErrors:3.4:
  <<: *with_r34
  <<: *errors_r
  needs:
    - job: "buildBinary:3.4"

checkWarnings:3.4:
  <<: *with_r34
  <<: *warnings_r
  needs:
    - job: "buildBinary:3.4"

checkNotes:3.4:
  <<: *with_r34
  <<: *notes_r
  needs:
    - job: "buildBinary:3.4"

test_unit:3.4:
  <<: *with_r34
  <<: *unit_r
  needs:
    - job: "checkErrors:3.4"
 
install_local:3.4:
  <<: *with_r34
  <<: *install_local_r
  needs:
    - job: "checkErrors:3.4"
 
code_coverage:3.4:
  <<: *with_r34
  <<: *coverage_r
  needs:
    - job: "checkErrors:3.4"
 
 