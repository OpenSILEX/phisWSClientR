# you can delete this line if you're not using a specific Docker image
#Â get more information at https://hub.docker.com/r/rocker/verse/
image: rocker/verse:3.4.4

# order of the different jobs
stages:
  - build
  - document
  - check
  - test
  - deploy

# define system environment variables
variables:
  R_REPOS: "http://cloud.R-project.org/"
  R_LIBS : "$CI_PROJECT_DIR/install_deps" # dependencies cache
  R_ENVIRON : "$CI_PROJECT_DIR/.Renviron" # R environment cache
  R_TMP_USER: "$CI_PROJECT_DIR/tmp"  # temporary directory

# Cache R directories in between jobs
cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - $R_LIBS
      - $R_ENVIRON


# create an archive 
buildBinary:
  stage: build
  before_script:
   - mkdir -p $R_LIBS
   - echo 'R_LIBS_USER="$R_LIBS"' > .Renviron
   - R -e '.libPaths()'
   - R -e 'devtools::install_deps(dep = TRUE,lib = Sys.getenv("R_LIBS"), upgrade = FALSE)'
  script:
   - R -e 'devtools::build(binary = TRUE)'

checkErrors:
  stage: check
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["errors"]], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/errorsFail"), error = function(e) system("touch $R_TMP_USER/errorsFail"))'
    - if [ -f $R_TMP_USER/errorsFail ]; then echo "Check Errors"; exit 1 ; else echo "No Errors"; fi

checkWarnings:
  allow_failure: true
  stage: check
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["warnings"]], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/warningsFail"), error = function(e) system("touch $R_TMP_USER/warningsFail"))'
    - if [ -f $R_TMP_USER/warningsFail ]; then echo "Check Warnings"; exit 1 ; else echo "No Warnings"; fi

checkNotes:
  allow_failure: true
  stage: check
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["notes"]], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/notesFail"), error = function(e) system("touch $R_TMP_USER/warningsFail"))'
    - if [ -f $R_TMP_USER/notesFail ]; then echo "Check Notes"; exit 1 ; else echo "No Notes"; fi

unitTests:
  when: manual
  stage: test
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'if (any(as.data.frame(devtools::test())[["failed"]] > 0)) system("touch $R_TMP_USER/testsFail")
    - if [ -f $R_TMP_USER/testsFail ]; then echo "Check Tests"; exit 1 ; else echo "Tests passed"; fi
    
codeCoverage:
  when: manual
  stage: test
  script:
    - R -e 'covr::codecov()'

installFromGithub:
  stage: test
  script:
    - R -e 'source("https://install-github.me/r-lib/desc");desc<-desc::description$new();remotes::install_github("OpenSILEX/phisWSClientR", build_vignettes=TRUE,ref=desc$get("Version")[[1]])'

installLocally:
  stage: test
  script:
    - R -e 'devtools::install(build_vignettes=TRUE)'

deployOnTestRepository:
  when: manual
  stage: deploy
  script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
  
    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)
  
    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  
    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  
    ##
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    ##
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  
    ##
    ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
    ## previously, uncomment the following two lines instead.
    ##
    #- echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
    #- chmod 644 ~/.ssh/known_hosts
  
    ##
    ## You can optionally disable host key checking. Be aware that by adding that
    ## you are suspectible to man-in-the-middle attacks.
    ## WARNING: Use this only with the Docker executor, if you use it with shell
    ## you will overwrite your user's SSH config.
    ##
    #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  
    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## email.
    ##
    - git config --global user.email "$GITHUB_USER_NAME"
    - git config --global user.name "$GITHUB_USER_EMAIL"
    - ssh git@github.com
    - "git remote add upstream https://github.com/niio972/phisWSClientR"
    - "git fetch upstream"
    - "git push upstream HEAD:master --force"
  only:
    - v2.0.0
    
deployOnTestRepositoryTest: 
  image: ilyasemenov/gitlab-ci-git-push
  only: 
    - master
  script: 
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 --decode)
    - git config --global user.email "$GITHUB_USER_NAME"
    - git config --global user.name "$GITHUB_USER_EMAIL"
    - "mkdir -p ~/.ssh"
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - "git remote add upstream https://github.com/niio972/phisWSClientR"
    - "git fetch upstream"
    - "git push upstream HEAD:master --force"
  stage: deploy
  when: manual
