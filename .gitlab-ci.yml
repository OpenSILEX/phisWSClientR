# you can delete this line if you're not using Docker
image: r-base

stages:
  - build
  - document
  - check
  - test
  - deploy


variables:
  R_REPOS: "http://cloud.R-project.org/"
  R_LIBS_USER: "$CI_PROJECT_DIR/ci/lib"

# install R and http dependencies
before_script:
   - mkdir -p 770 $R_LIBS_USER
   - apt-get update
   - apt-get install libssl-dev libcurl4-openssl-dev libgit2-dev -y
   - R -e 'install.packages("devtools", repos=Sys.getenv("R_REPOS"), lib= Sys.getenv("R_LIBS_USER"))'
   - R -e 'install.packages("remotes", repos=Sys.getenv("R_REPOS"), lib= Sys.getenv("R_LIBS_USER"))'
   - R -e 'install.packages("covr", repos=Sys.getenv("R_REPOS"), lib= Sys.getenv("R_LIBS_USER"))'
   - R -e 'install.packages("knitr", repos=Sys.getenv("R_REPOS"), lib= Sys.getenv("R_LIBS_USER"))'
   - R -e 'install.packages("ggplot2", repos=Sys.getenv("R_REPOS"), lib= Sys.getenv("R_LIBS_USER"))'
   - R -e 'install.packages("tidyr", repos=Sys.getenv("R_REPOS"), lib= Sys.getenv("R_LIBS_USER"))'
   - R -e 'install.packages("dplyr", repos=Sys.getenv("R_REPOS"), lib= Sys.getenv("R_LIBS_USER"))'
   - R -e 'install.packages("lubridate", repos=Sys.getenv("R_REPOS"), lib= Sys.getenv("R_LIBS_USER"))'
   - R -e 'install.packages("urltools", repos=Sys.getenv("R_REPOS"), lib= Sys.getenv("R_LIBS_USER"))'
   
# Cache packages in between jobs
cache:
    paths:
      - $R_LIBS_USER

buildbinary:
  stage: build
  script:
    - R -e 'devtools::build(binary = TRUE)'

checkerrors:
  stage: check
  script:
    - R -e 'try(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["errors"]], character(0))) stop("Check with Errors"), silent = TRUE)'

checkwarnings:
  stage: check
  script:
    - R -e 'try(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["warnings"]], character(0))) stop("Check with Warnings"), silent = TRUE)'

checknotes:
  stage: check
  script:
    - R -e 'try(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["notes"]], character(0))) stop("Check with Notes"), silent = TRUE)'

unittests:
  stage: test
  script:
    - R -e 'if (any(as.data.frame(devtools::test())[["failed"]] > 0)) stop("Some tests failed.")'

codecov:
  stage: test
  script:
    - R -e 'covr::codecov()'

install_from_github:
  stage: deploy
  script:
    - R -e 'remotes::install_github("OpenSILEX/phisWSClientR", build_vignettes=TRUE,ref="v1.3.0",upgrade ="always")'

install:
  stage: deploy
  script:
    - R -e 'devtools::install()'

deployonotherrepository:
  stage: deploy
  script:
    - git remote add upstream https://github.com/niio972/phisWSClientR
    - git fetch upstream
    - git push upstream master
  when: manual
  only:
    - master
