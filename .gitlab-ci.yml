# you can delete this line if you're not using a specific Docker image
#get more information at https://hub.docker.com/r/rocker/verse/
image: ubuntu:18.04

# order of the different jobs
stages:
  - build
  - check
  - document
  - test
  - deploy

# define system environment variables
variables:
  R_REPOS: "http://cloud.R-project.org/"
  R_LIBS_USER_DIR : "$CI_PROJECT_DIR/.cache/install_deps" # dependencies cache
  R_ENVIRON : "$CI_PROJECT_DIR/.Renviron" # R environment cache
  R_TMP_USER: "$CI_PROJECT_DIR/tmp"  # temporary directory

# Cache R directories in between jobs
.cache_dependencies: &cache_dependencies
  cache:  
     paths:
      - ".cache/install_deps/$R_VERSION"
      - ".Renviron"

# load packages
#   - echo "creating cache dir"
#  - mkdir -p  $R_LIBS_USER
#  - chmod -R 777 $R_LIBS_USER
# - R -e 'dir.create(Sys.getenv("R_LIBS_USER"), recursive = TRUE)' # create personal library
.prepare_script_r: &prepare_script_r
  <<: *cache_dependencies
  before_script:   
    - echo 'R_LIBS_USER="${R_LIBS_USER_DIR}/${R_VERSION}'' > .Renviron
    - R -e ".libPaths('')"
    - R -e '.libPaths(paste0(Sys.getenv("R_LIBS_USER_DIR"),"/",Sys.getenv("R_VERSION"))'
    - R -e ".libPaths()"
    - R -e 'options(repos =c(CRAN=Sys.getenv("R_REPOS")));devtools::install_deps(dependencies = TRUE, upgrade = FALSE)'

# create an archive 
.build:binary: &build_r
  <<: *prepare_script_r
  image: rocker/verse:$R_VERSION
  stage: build
  script:
   - R -e 'devtools::build(binary = TRUE)'

.check:errors: &errors_r
  <<: *prepare_script_r
  image: rocker/verse:$R_VERSION
  stage: check
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["errors"]], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/errorsFail"), error = function(e) system("touch $R_TMP_USER/errorsFail"))'
    - if [ -f $R_TMP_USER/errorsFail ]; then echo "Check Errors"; exit 1 ; else echo "No Errors"; fi
    
.check:warnings: &warnings_r
  <<: *prepare_script_r
  image: rocker/verse:$R_VERSION
  stage: check
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["warnings"]], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/warningsFail"), error = function(e) system("touch $R_TMP_USER/warningsFail"))'
    - if [ -f $R_TMP_USER/warningsFail ]; then echo "Check Warnings"; exit 1 ; else echo "No Warnings"; fi

.check:notes: &notes_r
  <<: *prepare_script_r
  image: rocker/verse:$R_VERSION
  allow_failure: true
  stage: check
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["notes"]], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/notesFail"), error = function(e) system("touch $R_TMP_USER/notesFail"))'
    - if [ -f $R_TMP_USER/notesFail ]; then echo "Check Notes"; exit 1 ; else echo "No Notes"; fi

.unit:tests: &unit_r
  <<: *prepare_script_r
  image: rocker/verse:$R_VERSION
  when: manual
  stage: test
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'if (any(as.data.frame(devtools::test())[["failed"]] > 0)) system("touch $R_TMP_USER/testsFail")
    - if [ -f $R_TMP_USER/testsFail ]; then echo "Check Tests"; exit 1 ; else echo "Tests passed"; fi    

.install:locally: &install_local_r
  <<: *prepare_script_r
  image: rocker/verse:$R_VERSION
  stage: test
  script:
    - R -e 'options(repos =c(CRAN=Sys.getenv("R_REPOS")));devtools::install(build_vignettes=TRUE,dependencies = TRUE)'

.code:coverage: &coverage_r
  <<: *prepare_script_r
  image: rocker/verse:$R_VERSION
  allow_failure: true
  when: manual
  stage: test
  script:
    - R -e 'covr::codecov()'

.build:vignette: &build_vignette_r
  <<: *prepare_script_r
  image: rocker/verse:$R_VERSION
  stage: document
  script:
    - mkdir -p $R_TMP_USER
    - R -e 'tryCatch(if (!identical(devtools::check(document = FALSE, args = "--no-tests")[["errors"]], character(0))) system("mkdir -p $R_TMP_USER;touch $R_TMP_USER/errorsFail"), error = function(e) system("touch $R_TMP_USER/errorsFail"))'
    - if [ -f $R_TMP_USER/errorsFail ]; then echo "Check Errors"; exit 1 ; else echo "No Errors"; fi
  
.with_r34: &with_r34
  variables: 
   R_VERSION: "3.4"

.with_r35: &with_r35
  variables: 
   R_VERSION: "3.5"

.with_r36: &with_r36
  variables: 
   R_VERSION: "3.6"

.with_r37: &with_r37
  variables: 
   R_VERSION: "3.7"

buildBinary:3.4:
  <<: *with_r34
  <<: *build_r

checkErrors:3.4:
  <<: *with_r34
  <<: *errors_r
  needs: ["buildBinary:3.4"]

checkWarnings:3.4:
  <<: *with_r34
  <<: *warnings_r
  needs: ["buildBinary:3.4"]

checkNotes:3.4:
  <<: *with_r34
  <<: *notes_r
  needs: ["buildBinary:3.4"]

test_unit:3.4:
  <<: *with_r34
  <<: *unit_r
  needs: ["checkErrors:3.4"]
 
install_local:3.4:
  <<: *with_r34
  <<: *install_local_r
  needs: ["checkErrors:3.4"]
 
code_coverage:3.4:
  <<: *with_r34
  <<: *coverage_r
  needs: ["checkErrors:3.4"]
 
build_vignette_r:3.4:
  <<: *with_r34
  <<: *build_vignette_r
  needs: ["checkErrors:3.4"]
 
 